using UnityEngine;
using System.IO.Ports;
using System.Collections;
using System.Threading;

public class SerialHandler : MonoBehaviour
{
	// SerialDataReceivedEventHandler ????????????
	public delegate void SerialDataReceivedEventHandler (string message);

	// event ????????????????
	// event ?????? ??????????
	// ???????????????????
	public event SerialDataReceivedEventHandler OnDataReceived;

	// Only for Mac
	// Please change for your environment
	public string portName = "/dev/cu.usbmodem14201";

	// ????????????????
	public int baudRate = 9600;

	private SerialPort serialPort_;
	private Thread thread_;

	// ?????
	private bool isRunning_ = false;

	private string message_;
	private bool isNewMessageReceived_ = false;

	void Awake()
	{
		Open();
	}

	void Update()
	{
		if (isNewMessageReceived_)
		{
			// ??????? event ??????????????
			OnDataReceived(message_);
		}
		isNewMessageReceived_ = false;
	}

	void OnDestroy()
	{
		Close();
	}

	private void Open()
	{
		serialPort_ = new SerialPort(portName, baudRate, Parity.None, 8, StopBits.One);
		//serialPort_ = new SerialPort(portName, baudRate);

		// ?????????????????
		serialPort_.Open();

		isRunning_ = true;

		thread_ = new Thread(Read);

		// ?????????? Running ?????
		thread_.Start();
	}

	private void Close()
	{
		isNewMessageReceived_ = false;
		isRunning_ = false;

		if (thread_ != null && thread_.IsAlive)
		{
			/* ?????????????????????????????????????????
			 * ?? COM ??? SendMessage ???????????????
			 */
			thread_.Join();
		}

		if (serialPort_ != null && serialPort_.IsOpen)
		{
			// ?????????IsOpen ?????? false ?????
			// ?? Stream ?????????????
			serialPort_.Close();

			// Component ??????????????????????????
			serialPort_.Dispose();
		}
	}

	private void Read()
	{
		while (isRunning_ && serialPort_ != null && serialPort_.IsOpen)
		{
			message_ = serialPort_.ReadLine();
			isNewMessageReceived_ = true;
			/*
			try
			{
				message_ = serialPort_.ReadLine();
				isNewMessageReceived_ = true;
			}
			catch (System.Exception e)
			{
				Debug.LogWarning(e.Message);
			}
			*/
		}
	}

	public void Write(string message)
	{
		serialPort_.Write(message);
		/*
		try
		{
			serialPort_.Write(message);
		}
		catch (System.Exception e)
		{
			Debug.LogWarning(e.Message);
		}
		*/
	}
}